name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  # Container-based testing and building
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: ci
        tags: lsmcp:ci
        load: true
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Run type checking in container
      run: |
        docker run --rm \
        lsmcp:ci npm run type-check
    
    - name: Run linting in container
      run: |
        docker run --rm \
        lsmcp:ci npm run lint
    
    - name: Run all tests in container
      run: |
        docker run --rm \
        lsmcp:ci npm test -- --coverage
    
    - name: Extract build artifacts from container
      run: |
        # Create a temporary container to copy build artifacts
        container_id=$(docker create lsmcp:ci)
        docker cp "$container_id:/app/dist" ./dist
        docker rm "$container_id"
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: dist/

  docker-compose-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Test Docker compose configuration
      run: |
        # Test docker-compose setup
        echo "WORKSPACE_ROOT=${PWD}" > .env
        docker compose config

  # Efficiency benchmark job - improved formatting (issue #18)
  efficiency-benchmark:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history for base branch comparison
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Checkout base branch
      run: |
        git fetch origin ${{ github.base_ref }}
        git checkout origin/${{ github.base_ref }}
    
    - name: Run base branch benchmarks
      run: |
        npm run test:efficiency -- --quick
        mv benchmark-results.json base-benchmark-results.json
      continue-on-error: true
    
    - name: Checkout PR branch
      run: git checkout ${{ github.head_ref }}
    
    - name: Run current branch benchmarks
      run: npm run test:efficiency -- --quick
    
    - name: Format benchmark results
      id: format
      run: |
        npx tsx scripts/format-benchmark-results.ts \
          --current=benchmark-results.json \
          --base=base-benchmark-results.json \
          --output=formatted-results.md
      continue-on-error: true
    
    - name: Comment PR with efficiency results
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          let comment = '';
          
          try {
            // Try to read the formatted markdown
            comment = fs.readFileSync('formatted-results.md', 'utf8');
          } catch (e) {
            // Fallback to simple message if formatting failed
            comment = '## 📊 Efficiency Benchmark Results\n\n';
            comment += '⚠️ Benchmark results could not be formatted properly.\n';
            comment += 'Please check the workflow logs for details.';
          }
          
          // Find and update existing comment or create new one
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('Efficiency Benchmark Results')
          );
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: comment
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
          }